数据结构基础


数组

定义

        按顺序连续存储数据元素，通常索引从0开始
        以集合论中的元组为基础
        数组是最古老，最常用的数据结构

知识要点

        索引最优；不利于查找、插入和删除（除非在数组最末进行）
        最基础的是线性数组或一维数组
        数组长度固定，意味着声明数组时应指明长度
        动态数组与一维数组类似，但为额外添加的元素预留了空间
        如果动态数组已满，则把每一元素复制到更大的数组中
        类似网格或嵌套数组，二维数组有 x 和 y 索引

时间复杂度

        O(1)索引：一维数组：O(1)，动态数组：O(1)
        O(n)查找：一维数组：O(n)，动态数组：O(n)
        O(log n)最优查找：一维数组：O(log n)，动态数组：O(log n)
        O(n)插入：一维数组：n/a，动态数组：O(n)


链表

定义

        结点存储数据，并指向下一结点
        最基础的结点包含一个数据和一个指针（指向另一结点）
        链表靠结点中指向下一结点的指针连接成链

要点

        为优化插入和删除而设计，但不利于索引和查找
        双向链表包含指向前一结点的指针
        循环链表是一种终端结点指针域指向头结点的简单链表
        堆栈通常由链表实现，不过也可以利用数组实现
        堆栈是“后进先出”（LIFO）的数据结构
        由链表实现时，只有头结点处可以进行插入或删除操作
        同样地，队列也可以通过链表或数组实现
        队列是“先进先出”（FIFO）的数据结构
        由双向链表实现时，只能在头部删除，在末端插入

时间复杂度

        O(n)索引：链表：O(n)
        O(n)查找：链表：O(n)
        Linked Lists: O(n)最优查找：链表：O(n)
        O(1)插入：链表：O(1)


哈希表或哈希图

定义

        通过键值对进行储存
        哈希函数接受一个关键字，并返回该关键字唯一对应的输出值
        这一过程称为散列（hashing），是输入与输出一一对应的概念
        哈希函数为该数据返回在内存中唯一的存储地址

要点

        为查找、插入和删除而设计
        哈希冲突是指哈希函数对两个不同的数据项产生了相同的输出值
        所有的哈希函数都存在这个问题
        用一个非常大的哈希表，可以有效缓解这一问题
        哈希表对于关联数组和数据库检索十分重要

时间复杂度

        O(1)索引：哈希表：O(1)
        O(1)查找：哈希表：O(1)
        O(1)插入：哈希表：O(1)


二叉树

定义

        一种树形的数据结构，每一结点最多有两个子树
        子结点又分为左子结点和右子结点

要点

        为优化查找和排序而设计
        退化树是一种不平衡的树，如果完全只有一边，其本质就是一个链表
        相比于其他数据结构，二叉树较为容易实现
        可用于实现二叉查找树
        二叉树利用可比较的键值来确定子结点的方向
        左子树有比双亲结点更小的键值
        右子树有比双亲结点更大的键值
        重复的结点可省略
        由于上述原因，二叉查找树通常被用作一种数据结构，而不是二叉树

时间复杂度

        索引：二叉查找树：O(log n)
        查找：二叉查找树：O(log n)
        插入：二叉查找树：O(log n)
